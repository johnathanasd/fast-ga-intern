"""
Test load_analysis module.
"""
#  This file is part of FAST-OAD_CS23 : A framework for rapid Overall Aircraft Design
#  Copyright (C) 2022  ONERA & ISAE-SUPAERO
#  FAST is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

import numpy as np
import pytest


from ..wing.aerostructural_loads import AerostructuralLoad
from ..wing.structural_loads import StructuralLoads
from ..wing.aerodynamic_loads import AerodynamicLoads
from ..wing.loads import WingLoads

from tests.testing_utilities import run_system, get_indep_var_comp, list_inputs


XML_FILE = "beechcraft_76.xml"


def test_compute_shear_stress():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(AerostructuralLoad()), __file__, XML_FILE)
    cl_vector_only_prop = [
        0.04,
        0.13,
        0.21,
        0.3,
        0.39,
        0.47,
        0.56,
        0.68,
        0.84,
        1.01,
        1.17,
        1.34,
        1.51,
        1.67,
        1.84,
        2.01,
        2.18,
        2.35,
        2.51,
        2.68,
        2.85,
        3.02,
        3.19,
        3.35,
        3.52,
        3.68,
        3.85,
        4.01,
        4.18,
        4.34,
        4.5,
        4.66,
        4.81,
        4.97,
        5.13,
        5.28,
        5.43,
        5.58,
        5.73,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    y_vector = [
        1.43,
        1.42,
        1.42,
        1.42,
        1.42,
        1.41,
        1.42,
        1.41,
        1.4,
        1.4,
        1.41,
        1.4,
        1.4,
        1.46,
        1.5,
        1.38,
        1.35,
        1.36,
        1.35,
        1.34,
        1.33,
        1.32,
        1.31,
        1.3,
        1.28,
        1.26,
        1.24,
        1.21,
        1.19,
        1.16,
        1.13,
        1.09,
        1.05,
        1.01,
        0.95,
        0.88,
        0.79,
        0.67,
        0.63,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:only_prop:CL_vector", cl_vector_only_prop
    )
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:Y_vector", y_vector, units="m")
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:prop_on:velocity", 82.3111, units="m/s"
    )

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(AerostructuralLoad(), ivc)
    shear_max_mass_condition = problem.get_val("data:loads:max_shear:mass", units="kg")
    assert shear_max_mass_condition == pytest.approx(1747.15, abs=1e-1)
    shear_max_lf_condition = problem.get_val("data:loads:max_shear:load_factor")
    assert shear_max_lf_condition == pytest.approx(3.8, abs=1e-2)
    lift_shear_diagram = problem.get_val("data:loads:max_shear:lift_shear", units="N")
    lift_root_shear = lift_shear_diagram[0]
    assert lift_root_shear == pytest.approx(142889.41, abs=1)
    weight_shear_diagram = problem.get_val("data:loads:max_shear:weight_shear", units="N")
    weight_root_shear = weight_shear_diagram[0]
    assert weight_root_shear == pytest.approx(-21607.77, abs=1)


def test_compute_root_bending_moment():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(AerostructuralLoad()), __file__, XML_FILE)
    cl_vector_only_prop = [
        0.04,
        0.13,
        0.21,
        0.3,
        0.39,
        0.47,
        0.56,
        0.68,
        0.84,
        1.01,
        1.17,
        1.34,
        1.51,
        1.67,
        1.84,
        2.01,
        2.18,
        2.35,
        2.51,
        2.68,
        2.85,
        3.02,
        3.19,
        3.35,
        3.52,
        3.68,
        3.85,
        4.01,
        4.18,
        4.34,
        4.5,
        4.66,
        4.81,
        4.97,
        5.13,
        5.28,
        5.43,
        5.58,
        5.73,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    y_vector = [
        1.43,
        1.42,
        1.42,
        1.42,
        1.42,
        1.41,
        1.42,
        1.41,
        1.4,
        1.4,
        1.41,
        1.4,
        1.4,
        1.46,
        1.5,
        1.38,
        1.35,
        1.36,
        1.35,
        1.34,
        1.33,
        1.32,
        1.31,
        1.3,
        1.28,
        1.26,
        1.24,
        1.21,
        1.19,
        1.16,
        1.13,
        1.09,
        1.05,
        1.01,
        0.95,
        0.88,
        0.79,
        0.67,
        0.63,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:only_prop:CL_vector", cl_vector_only_prop
    )
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:Y_vector", y_vector, units="m")
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:prop_on:velocity", 82.3111, units="m/s"
    )

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(AerostructuralLoad(), ivc)
    max_rbm_mass_condition = problem.get_val("data:loads:max_rbm:mass", units="kg")
    assert max_rbm_mass_condition == pytest.approx(1559.71, abs=1e-1)
    max_rbm_lf_condition = problem.get_val("data:loads:max_rbm:load_factor")
    assert max_rbm_lf_condition == pytest.approx(3.8, abs=1e-2)
    lift_rbm_diagram = problem.get_val("data:loads:max_rbm:lift_rbm", units="N*m")
    lift_rbm = lift_rbm_diagram[0]
    assert lift_rbm == pytest.approx(369153, abs=1)
    weight_rbm_diagram = problem.get_val("data:loads:max_rbm:weight_rbm", units="N*m")
    weight_rbm = weight_rbm_diagram[0]
    assert weight_rbm == pytest.approx(-34854, abs=1)


def test_compute_mass_distribution():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(StructuralLoads()), __file__, XML_FILE)
    load_factor_shear = 4.0
    ivc.add_output("data:loads:max_shear:load_factor", load_factor_shear)
    load_factor_rbm = 4.0
    ivc.add_output("data:loads:max_rbm:load_factor", load_factor_rbm)

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(StructuralLoads(), ivc)
    point_mass_array = problem.get_val(
        "data:loads:structure:ultimate:force_distribution:point_mass", units="N/m"
    )
    point_mass_result = np.array(
        [
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -24546.6436177,
            -24546.6436177,
            -24546.6436177,
            -24546.6436177,
            -24546.6436177,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -145568.22319297,
            -145568.22319297,
            -145568.22319297,
            -145568.22319297,
            -145568.22319297,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(point_mass_array - point_mass_result)) <= 1e-1
    wing_mass_array = problem.get_val(
        "data:loads:structure:ultimate:force_distribution:wing", units="N/m"
    )
    wing_mass_result = np.array(
        [
            -591.87840868,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -589.0481754,
            -591.87840868,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )

    assert np.max(np.abs(wing_mass_result - wing_mass_array)) <= 1e-1
    fuel_mass_array = problem.get_val(
        "data:loads:structure:ultimate:force_distribution:fuel", units="N/m"
    )
    fuel_mass_result = np.array(
        [
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -1675.7088186,
            -1617.74357122,
            -1559.77832384,
            -1501.81307645,
            -1460.40932832,
            -1435.56707944,
            -1410.72483057,
            -1385.88258169,
            -1361.04033281,
            -0.0,
            -0.0,
            -0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )

    assert np.max(np.abs(fuel_mass_result - fuel_mass_array)) <= 1e-1


def test_compute_structure_shear():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(StructuralLoads()), __file__, XML_FILE)
    ivc.add_output("data:loads:max_shear:load_factor", 4.0)
    ivc.add_output("data:loads:max_rbm:load_factor", 4.0)

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(StructuralLoads(), ivc)
    point_mass_array = problem.get_val("data:loads:structure:ultimate:shear:point_mass", units="N")
    point_mass_result = np.array(
        [
            -8067.287414,
            -8067.287414,
            -8067.287414,
            -8067.287414,
            -8067.287414,
            -8055.01409219,
            -7770.1344051,
            -7485.25471801,
            -7200.37503093,
            -6915.49534384,
            -6903.22202203,
            -6903.22202203,
            -6903.22202203,
            -6903.22202203,
            -6830.43791043,
            -5141.02446073,
            -3451.61101102,
            -1762.19756131,
            -72.7841116,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )

    assert np.max(np.abs(point_mass_array - point_mass_result)) <= 1e-1
    wing_mass_array = problem.get_val("data:loads:structure:ultimate:shear:wing", units="N")
    wing_mass_result = np.array(
        [
            -3418.51620139,
            -3342.31619729,
            -3190.28143412,
            -3038.24667094,
            -2966.48137654,
            -2965.89232836,
            -2959.05604302,
            -2952.21975768,
            -2945.38347235,
            -2938.54718701,
            -2937.95813883,
            -2814.94461094,
            -2520.37525412,
            -2270.4266901,
            -2269.83764192,
            -2263.00135658,
            -2256.16507124,
            -2249.3287859,
            -2242.49250056,
            -2241.90345239,
            -2225.80589729,
            -1931.23654047,
            -1636.66718364,
            -1342.09782681,
            -1047.52846999,
            -837.12178654,
            -710.87777647,
            -584.6337664,
            -458.38975634,
            -332.14574627,
            -205.9017362,
            -79.65772613,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )

    assert np.max(np.abs(wing_mass_result - wing_mass_array)) <= 1e-1
    fuel_mass_array = problem.get_val("data:loads:structure:ultimate:shear:fuel", units="N")
    fuel_mass_result = np.array(
        [
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4267.78403856,
            -3444.29438802,
            -2649.79181589,
            -1884.27632215,
            -1355.22673176,
            -1044.89585387,
            -739.88913324,
            -440.20656987,
            -145.84816375,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )

    assert np.max(np.abs(fuel_mass_result - fuel_mass_array)) <= 1e-1


def test_compute_structure_bending():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(StructuralLoads()), __file__, XML_FILE)
    ivc.add_output("data:loads:max_shear:load_factor", 4.0)
    ivc.add_output("data:loads:max_rbm:load_factor", 4.0)

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(StructuralLoads(), ivc)
    point_mass_array = problem.get_val(
        "data:loads:structure:ultimate:root_bending:point_mass", units="N*m"
    )
    point_mass_result = np.array(
        [
            -14540.90609382,
            -13499.81286692,
            -11417.62641314,
            -9335.43995935,
            -8352.58103458,
            -8344.51374716,
            -8252.68320157,
            -8164.15886913,
            -8078.94074984,
            -7997.02884372,
            -7990.1256217,
            -6548.49532693,
            -3096.35379422,
            -167.13594142,
            -160.2327194,
            -90.76443471,
            -40.90288658,
            -10.64807501,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(point_mass_array - point_mass_result)) <= 1e-1
    wing_mass_array = problem.get_val(
        "data:loads:structure:ultimate:root_bending:wing", units="N*m"
    )
    wing_mass_result = np.array(
        [
            -9918.54733458,
            -9482.31230723,
            -8639.27265845,
            -7835.47355091,
            -7469.6876151,
            -7466.72142825,
            -7432.33999785,
            -7398.03790697,
            -7363.8151556,
            -7329.67174376,
            -7326.73349109,
            -6726.0314667,
            -5391.99648726,
            -4375.56513539,
            -4373.29500323,
            -4346.99173799,
            -4320.76781227,
            -4294.62322606,
            -4268.55797937,
            -4266.3157814,
            -4205.26882427,
            -3165.84847774,
            -2273.73544766,
            -1528.92973404,
            -931.43133688,
            -594.83492041,
            -428.9523317,
            -290.12618887,
            -178.35649192,
            -93.64324085,
            -35.98643566,
            -5.38607634,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )

    assert np.max(np.abs(wing_mass_result - wing_mass_array)) <= 1e-1
    fuel_mass_array = problem.get_val(
        "data:loads:structure:ultimate:root_bending:fuel", units="N*m"
    )
    fuel_mass_result = np.array(
        [
            -17620.83481194,
            -17016.0007311,
            -15806.33256942,
            -14596.66440774,
            -14025.66215837,
            -14020.97538273,
            -13966.58231798,
            -13912.18925322,
            -13857.79618846,
            -13803.4031237,
            -13798.71634807,
            -12819.9563261,
            -10476.20832451,
            -8487.4867082,
            -8482.79993256,
            -8428.40686781,
            -8374.01380305,
            -8319.62073829,
            -8265.22767353,
            -8260.5408979,
            -8132.46032292,
            -5788.71232133,
            -3864.02031472,
            -2343.88853619,
            -1213.82121885,
            -636.57029481,
            -379.66004449,
            -188.68895605,
            -62.51596328,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )

    assert np.max(np.abs(fuel_mass_result - fuel_mass_array)) <= 1e-1


def test_compute_lift_distribution():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(AerodynamicLoads()), __file__, XML_FILE)
    ivc.add_output("data:loads:max_shear:load_factor", 4.0)
    ivc.add_output("data:loads:max_shear:mass", 1747.0, units="kg")
    ivc.add_output("data:loads:max_rbm:load_factor", 4.0)
    ivc.add_output("data:loads:max_rbm:mass", 1568.0, units="kg")
    cl_vector_only_prop = [
        0.04,
        0.13,
        0.21,
        0.3,
        0.39,
        0.47,
        0.56,
        0.68,
        0.84,
        1.01,
        1.17,
        1.34,
        1.51,
        1.67,
        1.84,
        2.01,
        2.18,
        2.35,
        2.51,
        2.68,
        2.85,
        3.02,
        3.19,
        3.35,
        3.52,
        3.68,
        3.85,
        4.01,
        4.18,
        4.34,
        4.5,
        4.66,
        4.81,
        4.97,
        5.13,
        5.28,
        5.43,
        5.58,
        5.73,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    y_vector = [
        1.43,
        1.42,
        1.42,
        1.42,
        1.42,
        1.41,
        1.42,
        1.41,
        1.4,
        1.4,
        1.41,
        1.4,
        1.4,
        1.46,
        1.5,
        1.38,
        1.35,
        1.36,
        1.35,
        1.34,
        1.33,
        1.32,
        1.31,
        1.3,
        1.28,
        1.26,
        1.24,
        1.21,
        1.19,
        1.16,
        1.13,
        1.09,
        1.05,
        1.01,
        0.95,
        0.88,
        0.79,
        0.67,
        0.63,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:only_prop:CL_vector", cl_vector_only_prop
    )
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:Y_vector", y_vector, units="m")
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:prop_on:velocity", 82.3111, units="m/s"
    )

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(AerodynamicLoads(), ivc)
    lift_array = problem.get_val("data:loads:aerodynamic:ultimate:force_distribution", units="N/m")
    lift_result = np.array(
        [
            6727.59259473,
            6695.42271624,
            6685.44026375,
            6816.29714678,
            7336.55818301,
            7339.40232362,
            7372.41041626,
            7407.34031907,
            7457.50522008,
            7507.67012108,
            7511.99257721,
            8671.59604842,
            31594.73004791,
            28954.36210253,
            28948.13960661,
            28875.92351389,
            28803.70742117,
            28731.49132845,
            28659.27523573,
            28653.0527398,
            28483.00387936,
            25335.0582747,
            22148.37271376,
            18914.70126684,
            15621.72989116,
            13196.30076336,
            11661.97256886,
            10099.7748881,
            8484.62970505,
            6785.47570978,
            4945.07012295,
            2815.90482822,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )

    assert np.max(np.abs(lift_array - lift_result)) <= 1e-1


def test_load_group():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(WingLoads()), __file__, XML_FILE)
    cl_vector_only_prop = [
        0.04,
        0.13,
        0.21,
        0.3,
        0.39,
        0.47,
        0.56,
        0.68,
        0.84,
        1.01,
        1.17,
        1.34,
        1.51,
        1.67,
        1.84,
        2.01,
        2.18,
        2.35,
        2.51,
        2.68,
        2.85,
        3.02,
        3.19,
        3.35,
        3.52,
        3.68,
        3.85,
        4.01,
        4.18,
        4.34,
        4.5,
        4.66,
        4.81,
        4.97,
        5.13,
        5.28,
        5.43,
        5.58,
        5.73,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    y_vector = [
        1.43,
        1.42,
        1.42,
        1.42,
        1.42,
        1.41,
        1.42,
        1.41,
        1.4,
        1.4,
        1.41,
        1.4,
        1.4,
        1.46,
        1.5,
        1.38,
        1.35,
        1.36,
        1.35,
        1.34,
        1.33,
        1.32,
        1.31,
        1.3,
        1.28,
        1.26,
        1.24,
        1.21,
        1.19,
        1.16,
        1.13,
        1.09,
        1.05,
        1.01,
        0.95,
        0.88,
        0.79,
        0.67,
        0.63,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:only_prop:CL_vector", cl_vector_only_prop
    )
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:Y_vector", y_vector, units="m")
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:prop_on:velocity", 82.3111, units="m/s"
    )

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(WingLoads(), ivc)

    lift_shear_diagram = problem.get_val("data:loads:max_shear:lift_shear", units="N")
    lift_root_shear = lift_shear_diagram[0]
    assert lift_root_shear == pytest.approx(142889.45, abs=1)
