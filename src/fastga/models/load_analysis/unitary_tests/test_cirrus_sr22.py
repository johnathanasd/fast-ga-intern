"""
Test load_analysis module.
"""
#  This file is part of FAST-OAD_CS23 : A framework for rapid Overall Aircraft Design
#  Copyright (C) 2022  ONERA & ISAE-SUPAERO
#  FAST is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

import numpy as np
import pytest

from ..wing.aerostructural_loads import AerostructuralLoad
from ..wing.structural_loads import StructuralLoads
from ..wing.aerodynamic_loads import AerodynamicLoads
from ..wing.loads import WingLoads

from tests.testing_utilities import run_system, get_indep_var_comp, list_inputs

XML_FILE = "cirrus_sr22.xml"


def test_compute_shear_stress():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(AerostructuralLoad()), __file__, XML_FILE)
    cl_vector_only_prop = [
        1.53,
        1.53,
        1.53,
        1.52,
        1.52,
        1.52,
        1.52,
        1.51,
        1.53,
        1.55,
        1.57,
        1.58,
        1.59,
        1.6,
        1.61,
        1.62,
        1.63,
        1.64,
        1.64,
        1.65,
        1.65,
        1.65,
        1.65,
        1.66,
        1.65,
        1.65,
        1.65,
        1.65,
        1.63,
        1.63,
        1.62,
        1.61,
        1.58,
        1.55,
        1.49,
        1.43,
        1.31,
        1.14,
        0.94,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    y_vector = [
        0.05,
        0.14,
        0.23,
        0.32,
        0.41,
        0.5,
        0.59,
        0.72,
        0.88,
        1.04,
        1.21,
        1.37,
        1.54,
        1.7,
        1.87,
        2.04,
        2.2,
        2.37,
        2.54,
        2.7,
        2.87,
        3.04,
        3.2,
        3.37,
        3.53,
        3.7,
        3.86,
        4.02,
        4.18,
        4.35,
        4.5,
        4.66,
        4.82,
        4.97,
        5.13,
        5.28,
        5.43,
        5.58,
        5.73,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:only_prop:CL_vector", cl_vector_only_prop
    )
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:Y_vector", y_vector, units="m")
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:velocity", 82.311, units="m/s")

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(AerostructuralLoad(), ivc)
    shear_max_mass_condition = problem.get_val("data:loads:max_shear:mass", units="kg")
    assert shear_max_mass_condition == pytest.approx(1448.6, abs=1e-1)
    shear_max_lf_condition = problem.get_val("data:loads:max_shear:load_factor")
    assert shear_max_lf_condition == pytest.approx(4.28, abs=1e-2)
    lift_shear_diagram = problem.get_val("data:loads:max_shear:lift_shear", units="N")
    lift_root_shear = lift_shear_diagram[0]
    assert lift_root_shear == pytest.approx(99797, abs=1)
    weight_shear_diagram = problem.get_val("data:loads:max_shear:weight_shear", units="N")
    weight_root_shear = weight_shear_diagram[0]
    assert weight_root_shear == pytest.approx(-6077, abs=1)


def test_compute_root_bending_moment():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(AerostructuralLoad()), __file__, XML_FILE)
    cl_vector_only_prop = [
        1.53,
        1.53,
        1.53,
        1.52,
        1.52,
        1.52,
        1.52,
        1.51,
        1.53,
        1.55,
        1.57,
        1.58,
        1.59,
        1.6,
        1.61,
        1.62,
        1.63,
        1.64,
        1.64,
        1.65,
        1.65,
        1.65,
        1.65,
        1.66,
        1.65,
        1.65,
        1.65,
        1.65,
        1.63,
        1.63,
        1.62,
        1.61,
        1.58,
        1.55,
        1.49,
        1.43,
        1.31,
        1.14,
        0.94,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    y_vector = [
        0.05,
        0.14,
        0.23,
        0.32,
        0.41,
        0.5,
        0.59,
        0.72,
        0.88,
        1.04,
        1.21,
        1.37,
        1.54,
        1.7,
        1.87,
        2.04,
        2.2,
        2.37,
        2.54,
        2.7,
        2.87,
        3.04,
        3.2,
        3.37,
        3.53,
        3.7,
        3.86,
        4.02,
        4.18,
        4.35,
        4.5,
        4.66,
        4.82,
        4.97,
        5.13,
        5.28,
        5.43,
        5.58,
        5.73,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:only_prop:CL_vector", cl_vector_only_prop
    )
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:Y_vector", y_vector, units="m")
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:velocity", 82.311, units="m/s")

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(AerostructuralLoad(), ivc)
    max_rbm_mass_condition = problem.get_val("data:loads:max_rbm:mass", units="kg")
    assert max_rbm_mass_condition == pytest.approx(1448.6, abs=1e-1)
    max_rbm_lf_condition = problem.get_val("data:loads:max_rbm:load_factor")
    assert max_rbm_lf_condition == pytest.approx(4.28, abs=1e-2)
    lift_rbm_diagram = problem.get_val("data:loads:max_rbm:lift_rbm", units="N*m")
    lift_rbm = lift_rbm_diagram[0]
    assert lift_rbm == pytest.approx(252963, abs=1)
    weight_rbm_diagram = problem.get_val("data:loads:max_rbm:weight_rbm", units="N*m")
    weight_rbm = weight_rbm_diagram[0]
    assert weight_rbm == pytest.approx(-14542, abs=1)


def test_compute_mass_distribution():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(StructuralLoads()), __file__, XML_FILE)
    ivc.add_output("data:loads:max_shear:load_factor", 4.0)
    ivc.add_output("data:loads:max_rbm:load_factor", 4.0)

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(StructuralLoads(), ivc)
    point_mass_array = problem.get_val(
        "data:loads:structure:ultimate:force_distribution:point_mass", units="N/m"
    )
    point_mass_result = np.array(
        [
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -16557.21308922,
            -16557.21308922,
            -16557.21308922,
            -16557.21308922,
            -16557.21308922,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )

    assert np.max(np.abs(point_mass_array - point_mass_result)) <= 1e-1
    wing_mass_array = problem.get_val(
        "data:loads:structure:ultimate:force_distribution:wing", units="N/m"
    )
    wing_mass_result = np.array(
        [
            -651.43183992,
            -647.5712176,
            -647.5712176,
            -647.5712176,
            -635.31361955,
            -610.79842346,
            -594.71794661,
            -594.65505512,
            -593.9137507,
            -593.17244628,
            -592.43114186,
            -591.68983745,
            -591.62694595,
            -586.28322736,
            -561.76803127,
            -537.25283517,
            -512.73763908,
            -488.22244298,
            -465.0948995,
            -443.35500862,
            -421.61511775,
            -399.87522687,
            -378.13533599,
            -356.39544512,
            -334.65555424,
            -325.71591996,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )

    assert np.max(np.abs(wing_mass_result - wing_mass_array)) <= 1e-1
    fuel_mass_array = problem.get_val(
        "data:loads:structure:ultimate:force_distribution:fuel", units="N/m"
    )
    fuel_mass_result = np.array(
        [
            -0.0,
            -0.0,
            -0.0,
            -2185.92543546,
            -1713.21140035,
            -1538.66167827,
            -1430.69704875,
            -1430.28475778,
            -1425.43087253,
            -1420.58767942,
            -1415.75516712,
            -1410.93332431,
            -1410.52473481,
            -1376.08744329,
            -1225.0791742,
            -1085.22734983,
            -956.12244899,
            -837.35495051,
            -734.41807603,
            -645.40663249,
            -563.61307493,
            -488.7518138,
            -420.53725951,
            -0.0,
            -0.0,
            -0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )

    assert np.max(np.abs(fuel_mass_result - fuel_mass_array)) <= 1e-1


def test_compute_structure_shear():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(StructuralLoads()), __file__, XML_FILE)
    ivc.add_output("data:loads:max_shear:load_factor", 4.0)
    ivc.add_output("data:loads:max_rbm:load_factor", 4.0)

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(StructuralLoads(), ivc)
    point_mass_array = problem.get_val("data:loads:structure:ultimate:shear:point_mass", units="N")
    point_mass_result = np.array(
        [
            -797.19917449,
            -797.19917449,
            -797.19917449,
            -797.19917449,
            -797.19917449,
            -797.19917449,
            -797.19917449,
            -788.92056795,
            -593.7600776,
            -398.59958725,
            -203.4390969,
            -8.27860654,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )

    assert np.max(np.abs(point_mass_array - point_mass_result)) <= 1e-1
    wing_mass_array = problem.get_val("data:loads:structure:ultimate:shear:wing", units="N")
    wing_mass_result = np.array(
        [
            -2982.64233012,
            -2901.97448624,
            -2741.1182863,
            -2580.26208636,
            -2375.57758976,
            -2132.70945161,
            -1978.59260513,
            -1977.99791863,
            -1970.99306613,
            -1963.99695142,
            -1957.00957449,
            -1950.03093534,
            -1949.43927694,
            -1899.39737236,
            -1675.64135199,
            -1461.44139051,
            -1256.79748792,
            -1061.70964421,
            -886.42451279,
            -729.41121912,
            -579.91281834,
            -437.92931042,
            -303.46069538,
            -176.50697321,
            -57.06814392,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )

    assert np.max(np.abs(wing_mass_result - wing_mass_array)) <= 1e-1
    fuel_mass_array = problem.get_val("data:loads:structure:ultimate:shear:fuel", units="N")
    fuel_mass_result = np.array(
        [
            -4948.04466723,
            -4948.04466723,
            -4948.04466723,
            -4676.55355603,
            -4054.44560268,
            -3420.65318849,
            -3041.04141844,
            -3039.61092753,
            -3022.78071403,
            -3006.00765043,
            -2989.29161079,
            -2972.63246927,
            -2971.22174024,
            -2852.83632861,
            -2345.86707418,
            -1895.58666226,
            -1497.72611054,
            -1148.17606866,
            -859.17635235,
            -620.69229261,
            -411.72956977,
            -229.84251597,
            -72.68418394,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )

    assert np.max(np.abs(fuel_mass_result - fuel_mass_array)) <= 1e-1


def test_compute_structure_bending():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(StructuralLoads()), __file__, XML_FILE)
    ivc.add_output("data:loads:max_shear:load_factor", 4.0)
    ivc.add_output("data:loads:max_rbm:load_factor", 4.0)

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(StructuralLoads(), ivc)
    point_mass_array = problem.get_val(
        "data:loads:structure:ultimate:root_bending:point_mass", units="N*m"
    )
    point_mass_result = np.array(
        [
            -1283.6182228,
            -1184.60638725,
            -986.58271616,
            -788.55904507,
            -534.17251403,
            -223.42312304,
            -19.59043219,
            -18.79323301,
            -10.64437875,
            -4.7958885,
            -1.24776225,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )

    assert np.max(np.abs(point_mass_array - point_mass_result)) <= 1e-1
    wing_mass_array = problem.get_val(
        "data:loads:structure:ultimate:root_bending:wing", units="N*m"
    )
    wing_mass_result = np.array(
        [
            -7758.18586405,
            -7392.76716216,
            -6691.89717704,
            -6030.98375015,
            -5240.59070929,
            -4362.85354675,
            -3837.515116,
            -3835.53682076,
            -3812.26339424,
            -3789.07248268,
            -3765.9639831,
            -3742.93779249,
            -3740.9880574,
            -3577.48513486,
            -2881.63874406,
            -2271.15029078,
            -1742.29480944,
            -1291.34733446,
            -933.92850973,
            -655.30255691,
            -429.65300956,
            -254.38217228,
            -126.89234965,
            -44.58584624,
            -4.86496665,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )

    assert np.max(np.abs(wing_mass_result - wing_mass_array)) <= 1e-1
    fuel_mass_array = problem.get_val(
        "data:loads:structure:ultimate:root_bending:fuel", units="N*m"
    )
    fuel_mass_result = np.array(
        [
            -11073.52037584,
            -10458.97510216,
            -9229.88455481,
            -8000.79400745,
            -6619.79511889,
            -5169.52345655,
            -4345.20549706,
            -4342.16517099,
            -4306.436521,
            -4270.90591218,
            -4235.57267164,
            -4200.43612799,
            -4197.46420099,
            -3950.09920456,
            -2942.60439679,
            -2121.25444913,
            -1464.79955273,
            -953.62284183,
            -588.01380451,
            -334.89749203,
            -158.90069506,
            -50.24991699,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )

    assert np.max(np.abs(fuel_mass_result - fuel_mass_array)) <= 1e-1


def test_compute_lift_distribution():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(AerodynamicLoads()), __file__, XML_FILE)
    ivc.add_output("data:loads:max_shear:load_factor", 4.28)
    ivc.add_output("data:loads:max_shear:mass", 1426.3, units="kg")
    ivc.add_output("data:loads:max_rbm:load_factor", 4.28)
    ivc.add_output("data:loads:max_rbm:mass", 1426.3, units="kg")
    cl_vector_only_prop = [
        1.53,
        1.53,
        1.53,
        1.52,
        1.52,
        1.52,
        1.52,
        1.51,
        1.53,
        1.55,
        1.57,
        1.58,
        1.59,
        1.6,
        1.61,
        1.62,
        1.63,
        1.64,
        1.64,
        1.65,
        1.65,
        1.65,
        1.65,
        1.66,
        1.65,
        1.65,
        1.65,
        1.65,
        1.63,
        1.63,
        1.62,
        1.61,
        1.58,
        1.55,
        1.49,
        1.43,
        1.31,
        1.14,
        0.94,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    y_vector = [
        0.05,
        0.14,
        0.23,
        0.32,
        0.41,
        0.5,
        0.59,
        0.72,
        0.88,
        1.04,
        1.21,
        1.37,
        1.54,
        1.7,
        1.87,
        2.04,
        2.2,
        2.37,
        2.54,
        2.7,
        2.87,
        3.04,
        3.2,
        3.37,
        3.53,
        3.7,
        3.86,
        4.02,
        4.18,
        4.35,
        4.5,
        4.66,
        4.82,
        4.97,
        5.13,
        5.28,
        5.43,
        5.58,
        5.73,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:only_prop:CL_vector", cl_vector_only_prop
    )
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:Y_vector", y_vector, units="m")
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:velocity", 82.311, units="m/s")

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(AerodynamicLoads(), ivc)
    lift_array = problem.get_val("data:loads:aerodynamic:ultimate:force_distribution", units="N/m")
    lift_result = np.array(
        [
            14147.26531997,
            14063.42347362,
            13999.77797285,
            13955.18644184,
            13837.45696758,
            13600.26535879,
            13367.98742852,
            13367.07653609,
            13356.33179841,
            13345.57228535,
            13334.7979969,
            13324.00893306,
            13323.09292016,
            13244.55466684,
            12853.2040197,
            12401.53506846,
            11902.64317467,
            11361.57885556,
            10794.09120826,
            10250.63952234,
            9616.24487428,
            8932.40472585,
            8033.96804677,
            6768.76531668,
            4666.61773331,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )

    assert np.max(np.abs(lift_array - lift_result)) <= 1e-1


def test_load_group():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(WingLoads()), __file__, XML_FILE)
    cl_vector_only_prop = [
        1.53,
        1.53,
        1.53,
        1.52,
        1.52,
        1.52,
        1.52,
        1.51,
        1.53,
        1.55,
        1.57,
        1.58,
        1.59,
        1.6,
        1.61,
        1.62,
        1.63,
        1.64,
        1.64,
        1.65,
        1.65,
        1.65,
        1.65,
        1.66,
        1.65,
        1.65,
        1.65,
        1.65,
        1.63,
        1.63,
        1.62,
        1.61,
        1.58,
        1.55,
        1.49,
        1.43,
        1.31,
        1.14,
        0.94,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    y_vector = [
        0.05,
        0.14,
        0.23,
        0.32,
        0.41,
        0.5,
        0.59,
        0.72,
        0.88,
        1.04,
        1.21,
        1.37,
        1.54,
        1.7,
        1.87,
        2.04,
        2.2,
        2.37,
        2.54,
        2.7,
        2.87,
        3.04,
        3.2,
        3.37,
        3.53,
        3.7,
        3.86,
        4.02,
        4.18,
        4.35,
        4.5,
        4.66,
        4.82,
        4.97,
        5.13,
        5.28,
        5.43,
        5.58,
        5.73,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:only_prop:CL_vector", cl_vector_only_prop
    )
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:Y_vector", y_vector, units="m")
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:velocity", 82.311, units="m/s")

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(WingLoads(), ivc)

    lift_shear_diagram = problem.get_val("data:loads:max_shear:lift_shear", units="N")
    lift_root_shear = lift_shear_diagram[0]
    assert lift_root_shear == pytest.approx(99797, abs=1)
